{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","mainFeaturesPost","position","color","palette","common","white","marginBottom","backgroundSize","backgroundRepeat","backgroundPosition","overlay","top","bottom","right","left","backgroundOverlay","mainFeaturesPostContent","padding","marginTop","cardMedia","paddingTop","cardContent","cardGrid","footerTitle","cards","App","classes","React","useState","value","setValue","AppBar","Container","fixed","className","Toolbar","IconButton","edge","aria-label","Typography","variant","Box","mr","Button","Paper","style","backgroundImage","Grid","container","item","md","component","gutterBottom","paragraph","mainContent","maxWidth","align","mainButtons","justify","map","card","key","xs","sm","Card","classname","CardMedia","image","CardContent","CardActions","size","BottomNavigation","onChange","event","newValue","BottomNavigationAction","label","icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5cc28bf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {\n    Container,\n    Toolbar,\n    AppBar,\n    IconButton,\n    Box,\n    Paper,\n    CardMedia,\n    CardContent,\n    BottomNavigation\n} from \"@material-ui/core\";\nimport RestoreIcon from '@material-ui/icons/Restore'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\nimport LocationOnIcon from '@material-ui/icons/LocationOn'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport LayerIcon from '@material-ui/icons/Layers'\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled'\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(1)\n    },\n    title: {\n        flexGrow: 1\n    },\n    mainFeaturesPost: {\n        position: 'relative',\n        color: theme.palette.common.white,\n        marginBottom: theme.spacing(4),\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center'\n\n    },\n    overlay: {\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        right: 0,\n        left: 0,\n        backgroundOverlay: 'rgba(0,0,0,.3)'\n    },\n    mainFeaturesPostContent: {\n        position: 'relative',\n        padding: theme.spacing(6),\n        marginTop: theme.spacing(8)\n\n\n    },\n    cardMedia: {\n        paddingTop: '56.25%'\n    },\n    cardContent: {\n        flexGrow: 1\n    },\n    cardGrid: {\n        marginTop: theme.spacing(4)\n    },\n    footerTitle:{\n        marginTop:theme.spacing(1)\n    }\n}))\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n\nfunction App() {\n\n    const classes = useStyles();\n    const [value, setValue] = React.useState('recents');\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    }\n    return (\n        <>\n            <AppBar color='primary' position='fixed'>\n                <Container fixed>\n                    <div className={classes.overlay}/>\n                    <Toolbar>\n                        <IconButton className={classes.menuButton} edge='start' color='inherit' aria-label='menu'>\n                            <MenuIcon/>\n                        </IconButton>\n                        <Typography className={classes.title} variant='h6'>Ассоциация психологов</Typography>\n                        <Box mr={3}>\n                            <Button variant='outlined' color='inherit'>\n                                Log in\n                            </Button>\n                        </Box>\n                        <Button mr={3} variant='contained' color='secondary'>\n                            Sign up\n                        </Button>\n                    </Toolbar>\n                </Container>\n            </AppBar>\n            <main>\n                <Paper\n                    className={classes.mainFeaturesPost}\n                    style={{backgroundImage: `url(https://source.unsplash.com/random)`}}>\n                    <Container fixed>\n                        <Grid container>\n                            <Grid item md={6}>\n                                <div className={classes.mainFeaturesPostContent}>\n                                    <Typography\n                                        component=\"h1\"\n                                        variant='h3'\n                                        color='inherit'\n                                        gutterBottom>\n                                        Some text\n                                    </Typography>\n\n                                    <Typography\n                                        variant='h5'\n                                        color='inherit'\n                                        paragraph>\n\n                                        sometext2safaasf\n                                        asfasfsafasfasfaf\n                                        asfasfasfhafhasf\n                                    </Typography>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </Paper>\n                <div className={classes.mainContent}>\n                    <Container maxWidth='md'>\n                        <Typography variant='h2' align='center' color='textPrimary' gutterBottom>\n                            Some text\n                        </Typography>\n                        <Typography variant='h5' align='center' color='textSecondary' paragraph gutterBottom>\n                            Material-UI стремится обеспечить прочную основу для создания динамических интерфейсов. Для\n                            простоты, ** мы предоставляем решение для стилизации, используемое в компонентах Material-UI\n                            ** в виде пакета @ material-ui /styles. Вы можете пользоваться им, но вы не обязаны\n                            задействовать именно его, поскольку Material-UI также совместим со всеми другими основными\n                            решениями для стилизации.\n                        </Typography>\n                        <div className={classes.mainButtons}>\n                            <Grid container spacing={2} justify='center'>\n                                <Grid item>\n                                    <Button variant='contained' color='primary'>Start now</Button>\n\n                                </Grid>\n                                <Grid item>\n                                    <Button variant='outlined' color='primary'>Learn more</Button>\n                                </Grid>\n                            </Grid>\n\n                        </div>\n\n                    </Container>\n\n                </div>\n                <Container className={classes.cardGrid} maxWidth='md'>\n                    <Grid container spacing={4}>\n                        {cards.map((card) => (\n                            <Grid item key={card} xs={12} sm={6} md={4}>\n                                <Card classname={classes.card}>\n                                    <CardMedia\n                                        className={classes.cardMedia}\n                                        image='https://source.unsplash.com/random'\n                                        title='image title'/>\n                                    <CardContent classname={classes.cardContent}>\n                                        <Typography variant='h5' gutterBottom>\n                                            Some posts\n                                        </Typography>\n                                        <Typography>\n                                            Some posts Some posts Some posts Some posts\n                                        </Typography>\n                                    </CardContent>\n                                    <CardActions>\n                                        <Button size='small' color='primary'>\n                                            View\n                                        </Button>\n                                        <Button size='small' color='primary'>\n                                            Edit\n                                        </Button>\n                                        <LayerIcon/>\n                                        <PlayCircleFilledIcon/>\n                                    </CardActions>\n\n\n                                </Card>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </Container>\n            </main>\n            <footer>\n\n                <BottomNavigation value={value}\n                                  onChange={handleChange}\n                                  className={classes.root}>\n                    <BottomNavigationAction\n                        label='Recents'\n                        value='recents'\n                        icon={<RestoreIcon/>}/>\n\n                    <BottomNavigationAction\n                        label='Favorites'\n                        value='favorites'\n                        icon={<FavoriteIcon/>}/>\n\n\n                    <BottomNavigationAction\n                        label='Nearby'\n                        value='nearby'\n                        icon={<LocationOnIcon/>}/>\n\n                </BottomNavigation>\n                <Typography variant = 'subtitle1' component='p' className={classes.footerTitle} color='textSecondary'  align='center' gutterBottom>\n                    website building for Vladivostok Psy Association\n                </Typography>\n            </footer>\n        </>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}